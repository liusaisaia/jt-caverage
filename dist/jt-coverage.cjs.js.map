{"version":3,"file":"jt-coverage.cjs.js","sources":["../index.js"],"sourcesContent":["// 修改为从 dist 目录导入\r\n/**\r\n * 封装引入插件\r\n */\r\nconst { execSync } = require('child_process')\r\nconst CoverageSourceMapTracePlugin = require('coverage-source-map-trace-plugin')\r\nconst path = require('path')\r\nlet cachedGitInfo = null\r\n\r\n/**\r\n * 获取Git提交信息\r\n * @returns {string} 包含提交信息的JSON字符串，包含commit、fullCommitId、branchName和timestamp字段\r\n * * 获取完整提交ID\r\n * 获取分支名称（两种方式获取）\r\n * 组合信息并缓存结果\r\n */\r\nconst getGitInfo = () => {\r\n  if (cachedGitInfo) return cachedGitInfo\r\n  const fullRepoPath = execSync(\"git rev-parse --show-toplevel\", { stdio: \"pipe\" }).toString().trim();\r\n  const projectName = path.basename(fullRepoPath);\r\n  const dayjs = require('dayjs')\r\n  const commitHash = execSync('git rev-parse --short=8 HEAD').toString().trim()\r\n  const fullCommitId = execSync('git rev-parse HEAD').toString().trim()\r\n  const branch1 = execSync('git describe --contains --all HEAD 2>/dev/null || echo \"unknown\"').toString().trim().split('/').pop()\r\n  const branch2 = execSync('git symbolic-ref --short HEAD 2>/dev/null || git name-rev --name-only HEAD')\r\n    .toString()\r\n    .trim()\r\n    .replace(/^origin\\//, '').split('/').pop()\r\n  const branchName = branch1.includes('unknown') ? branch2 : branch1\r\n  cachedGitInfo = `{\r\n    \"commit\": \"${commitHash}\",\r\n    \"fullCommitId\": \"${fullCommitId}\",\r\n    \"branchName\": \"${branchName}\",\r\n    \"timestamp\": \"${dayjs().format('YYYY-MM-DD HH:mm:ss')}\",\r\n    \"projectName\": \"${projectName}\",\r\n    \"coverageKey\": \"${handleProjectName(projectName)}\"\r\n  }`\r\n\r\n  return cachedGitInfo\r\n}\r\n\r\nconst getVueConfig = (config) => {\r\n  config\r\n    .plugin('coverage-source-map-trace-plugin')\r\n    .use(CoverageSourceMapTracePlugin)\r\n    .end()\r\n    .plugin('define')\r\n    .tap(args => {\r\n      args[0]['process.env'].GIT_BRANCH = JSON.stringify(cachedGitInfo)\r\n      return args\r\n    })\r\n  config.devtool('source-map')\r\n  return config\r\n}\r\n\r\nconst getBabelConfig = (options = {}) => {\r\n  return ['istanbul', {\r\n    coverageVariable: options.coverageVariable || '__coverage__', // 提供默认值\r\n    extension: options.extension || ['.js', '.vue', '.jsx', '.ts', '.tsx'], // 扩展更多文件类型\r\n    exclude: options.exclude || ['**/node_modules/**'] // 添加排除选项\r\n  }]\r\n}\r\n\r\n/**\r\n * 处理项目名称\r\n */\r\nconst handleProjectName = (projectName) => {\r\n  return `__${projectName.replace(/-/g, \"_\")}__`;\r\n}\r\n\r\n/**\r\n * 一站式配置Vue和Babel的覆盖率\r\n * @param {Object} config - Vue配置对象\r\n * @param {Object} options - 配置选项\r\n * @param {string} options.coverageVariable - 覆盖率变量名\r\n * @param {Array} options.extension - 文件扩展名数组\r\n * @param {boolean} options.applyBabel - 是否自动应用Babel配置，默认为true\r\n * @returns {Object} config - 配置完成的config对象\r\n */\r\nconst setupCoverage = (config, options = {}) => {\r\n  if (!config) {\r\n    throw new Error('[jt-coverage] config参数不能为空')\r\n  }\r\n  getGitInfo()\r\n  const cachedGitInfoData = JSON.parse(cachedGitInfo);\r\n  if (options.coverageVariable) {\r\n    cachedGitInfoData.projectName = options.coverageVariable;\r\n    cachedGitInfoData.coverageKey = handleProjectName(options.coverageVariable);\r\n  }\r\n  cachedGitInfo = JSON.stringify(cachedGitInfoData);\r\n  // 应用Vue配置\r\n  getVueConfig(config)\r\n\r\n\r\n  // 获取Babel配置\r\n  const babelConfig = getBabelConfig({ ...options, coverageVariable: cachedGitInfoData.coverageKey  })\r\n  // - 替换_\r\n\r\n  // 如果选项中指定了自动应用Babel配置（默认为true）\r\n  if (options.applyBabel !== false) {\r\n    // 直接应用Babel配置到config对象\r\n    config.module\r\n      .rule('js')\r\n      .use('babel-loader')\r\n      .tap(opts => {\r\n        // 确保plugins数组存在\r\n        if (!opts) opts = {}\r\n        if (!opts.plugins) opts.plugins = []\r\n\r\n        // 添加istanbul插件\r\n        opts.plugins.push(babelConfig)\r\n\r\n        return opts\r\n      })\r\n  }\r\n\r\n  return config\r\n}\r\n\r\nmodule.exports = {\r\n  getVueConfig,\r\n  getBabelConfig,\r\n  setupCoverage,\r\n  cachedGitInfo,\r\n  /**\r\n   * 使用 getter 来延迟加载 Vue 组件。\r\n   * 这样在 Node.js 环境中 (如 vue.config.js) 就不会立即 require('.vue') 文件，\r\n   * 只有在浏览器端代码真正使用 CoverageButton 时才会加载它。\r\n   */\r\n  get CoverageButton() {\r\n    const component = require('../lib/CoverageButton.vue').default\r\n    // 动态为组件添加 install 方法，使其可以作为插件使用 (Vue.use)\r\n    component.install = function(Vue) {\r\n      Vue.component(component.name, component)\r\n    }\r\n    return component\r\n  }\r\n}\r\n"],"names":[],"mappings":";AAIA,MAAM,EAAE,SAAQ,IAAK,QAAQ,eAAe;AAC5C,MAAM,+BAA+B,QAAQ,kCAAkC;AAC/E,MAAM,OAAO,QAAQ,MAAM;AAC3B,IAAI,gBAAgB;AASpB,MAAM,aAAa,MAAM;AACvB,MAAI;AAAe,WAAO;AAC1B,QAAM,eAAe,SAAS,iCAAiC,EAAE,OAAO,OAAM,CAAE,EAAE,WAAW;AAC7F,QAAM,cAAc,KAAK,SAAS,YAAY;AAC9C,QAAM,QAAQ,QAAQ,OAAO;AAC7B,QAAM,aAAa,SAAS,8BAA8B,EAAE,SAAQ,EAAG,KAAM;AAC7E,QAAM,eAAe,SAAS,oBAAoB,EAAE,SAAQ,EAAG,KAAM;AACrE,QAAM,UAAU,SAAS,kEAAkE,EAAE,SAAQ,EAAG,KAAI,EAAG,MAAM,GAAG,EAAE,IAAK;AAC/H,QAAM,UAAU,SAAS,4EAA4E,EAClG,SAAU,EACV,KAAM,EACN,QAAQ,aAAa,EAAE,EAAE,MAAM,GAAG,EAAE,IAAK;AAC5C,QAAM,aAAa,QAAQ,SAAS,SAAS,IAAI,UAAU;AAC3D,kBAAgB;AAAA,iBACD;AAAA,uBACM;AAAA,qBACF;AAAA,oBACD,MAAO,EAAC,OAAO,qBAAqB;AAAA,sBAClC;AAAA,sBACA,kBAAkB,WAAW;AAAA;AAGjD,SAAO;AACT;AAEA,MAAM,eAAe,CAAC,WAAW;AAC/B,SACG,OAAO,kCAAkC,EACzC,IAAI,4BAA4B,EAChC,IAAK,EACL,OAAO,QAAQ,EACf,IAAI,UAAQ;AACX,SAAK,GAAG,eAAe,aAAa,KAAK,UAAU,aAAa;AAChE,WAAO;AAAA,EACb,CAAK;AACH,SAAO,QAAQ,YAAY;AAC3B,SAAO;AACT;AAEA,MAAM,iBAAiB,CAAC,UAAU,OAAO;AACvC,SAAO,CAAC,YAAY;AAAA,IAClB,kBAAkB,QAAQ,oBAAoB;AAAA,IAC9C,WAAW,QAAQ,aAAa,CAAC,OAAO,QAAQ,QAAQ,OAAO,MAAM;AAAA,IACrE,SAAS,QAAQ,WAAW,CAAC,oBAAoB;AAAA,EACrD,CAAG;AACH;AAKA,MAAM,oBAAoB,CAAC,gBAAgB;AACzC,SAAO,KAAK,YAAY,QAAQ,MAAM,GAAG;AAC3C;AAWA,MAAM,gBAAgB,CAAC,QAAQ,UAAU,OAAO;AAC9C,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI,MAAM,0DAA4B;AAAA,EAC7C;AACD,aAAY;AACZ,QAAM,oBAAoB,KAAK,MAAM,aAAa;AAClD,MAAI,QAAQ,kBAAkB;AAC5B,sBAAkB,cAAc,QAAQ;AACxC,sBAAkB,cAAc,kBAAkB,QAAQ,gBAAgB;AAAA,EAC3E;AACD,kBAAgB,KAAK,UAAU,iBAAiB;AAEhD,eAAa,MAAM;AAInB,QAAM,cAAc,eAAe,EAAE,GAAG,SAAS,kBAAkB,kBAAkB,aAAc;AAInG,MAAI,QAAQ,eAAe,OAAO;AAEhC,WAAO,OACJ,KAAK,IAAI,EACT,IAAI,cAAc,EAClB,IAAI,UAAQ;AAEX,UAAI,CAAC;AAAM,eAAO,CAAE;AACpB,UAAI,CAAC,KAAK;AAAS,aAAK,UAAU,CAAE;AAGpC,WAAK,QAAQ,KAAK,WAAW;AAE7B,aAAO;AAAA,IACf,CAAO;AAAA,EACJ;AAED,SAAO;AACT;AAEA,OAAO,UAAU;AAAA,EACf;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAMA,IAAI,iBAAiB;AACnB,UAAM,YAAY,QAAQ,2BAA2B,EAAE;AAEvD,cAAU,UAAU,SAAS,KAAK;AAChC,UAAI,UAAU,UAAU,MAAM,SAAS;AAAA,IACxC;AACD,WAAO;AAAA,EACR;AACH;"}